name: Process Project Gutenberg Data

on:
  schedule:
    - cron: '0 1 * * *' # Daily at 1am UTC
    - cron: '0 0 1 * *' # Monthly at midnight on the 1st
      env:
        force_full_load: true
  workflow_dispatch:
    inputs:
      force_extractions:
        type: boolean
        description: 'Force extractions'
        default: false
      force_full_load:
        type: boolean
        description: 'Force full load'
        default: false

jobs:
  process-PG-RDF:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      LOAD_MODE: ${{ inputs.force_full_load && 'full' || 'none' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ env.GITHUB_PAT }}

      - name: Make scripts executable
        run: |
          chmod +x .github/scripts/check_rss.sh
          chmod +x .github/scripts/download_rdf_catalog.sh
          chmod +x .github/scripts/extract_gutenberg_authors.sh
          chmod +x .github/scripts/load_rdf_files.sh
          chmod +x .github/scripts/set_load_mode.sh
          chmod +x .github/scripts/setup_oxigraph.sh

      - name: Check if oxigraph_db exists
        if: env.LOAD_MODE != 'full'
        id: check_oxigraph_db
        uses: actions/cache/restore@v4
        with:
          path: oxigraph_db
          key: oxigraph-db-${{ github.run_id }} # This will never already exist.
          restore-keys: oxigraph-db-
          lookup-only: true

      - name: Set LOAD_MODE based on cache existence
        if: env.LOAD_MODE != 'full'
        run: ./.github/scripts/set_load_mode.sh ${{ steps.check_oxigraph_db.outputs.cache-matched-key }}

      - name: Check RSS
        if: env.LOAD_MODE == 'partial'
        run: ./.github/scripts/check_rss.sh

      - name: Check force extractions
        if: env.LOAD_MODE == 'none' && github.event.inputs.force_extractions == 'true'
        run: echo "LOAD_MODE=extract" >> $GITHUB_ENV

      - name: Restore Oxigraph DB cache
        if: env.LOAD_MODE == 'partial' || env.LOAD_MODE == 'extract'
        uses: actions/cache/restore@v4
        with:
          path: oxigraph_db
          key: ${{ steps.check_oxigraph_db.outputs.cache-matched-key }}

      - name: Download RDF catalog
        if: env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial'
        run: ./.github/scripts/download_rdf_catalog.sh pg_rdf_files

      - name: Set up Docker
        if: env.LOAD_MODE != 'none'
        uses: docker/setup-buildx-action@v3

      - name: Run Oxigraph Docker container
        if: env.LOAD_MODE != 'none'
        run: ./.github/scripts/setup_oxigraph.sh

      - name: Load RDF files into DB
        if: env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial'
        run: |
          ./.github/scripts/load_rdf_files.sh ${{ env.LOAD_MODE }} \
            pg_rdf_files/cache/epub

      - name: Perform SPARQL query to count ebooks
        if: env.LOAD_MODE != 'none'
        run: |
          curl -G --data-urlencode 'query=SELECT (COUNT(*) AS ?total) WHERE {
            GRAPH <http://gutenberg.org/graph/catalog> {
              ?s a <http://www.gutenberg.org/2009/pgterms/ebook>
            } }' \
            http://localhost:7878/query

      - name: Extract authors
        if: env.LOAD_MODE != 'none'
        run: |
          ./.github/scripts/extract_gutenberg_authors.sh

      - name: Cache authors CSV
        if: env.LOAD_MODE != 'none'
        uses: actions/cache@v4
        with:
          path: gutenberg_authors.csv
          key: gutenberg-authors-manual-v1
          restore-keys: |
            gutenberg-authors-

      - name: Stop Oxigraph Docker container
        if: env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial'
        run: docker stop oxigraph_server

      - name: Generate hash of oxigraph_db
        id: generate_db_hash
        if: env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial'
        run: |
          hash=$(echo oxigraph-db-${{ hashFiles('oxigraph_db') }})
          echo "oxigraph_db_hash=${hash}" >> $GITHUB_ENV

      - name: Save updated Oxigraph DB
        if: (env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial') && (!steps.check_oxigraph_db.outputs.cache-matched-key || env.oxigraph_db_hash != steps.check_oxigraph_db.outputs.cache-matched-key)
        uses: actions/cache/save@main
        with:
          path: oxigraph_db
          key: ${{ env.oxigraph_db_hash }}
