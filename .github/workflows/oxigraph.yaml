name: Load RDF Data to Oxigraph

on:
  # Daily at 1am UTC
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      run_extractions:
        type: boolean
        description: 'Force extractions'
        default: false

jobs:
  load-oxigraph:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ env.GITHUB_PAT }}

      - name: Make scripts executable
        run: |
          chmod +x .github/scripts/check_oxigraph_db.sh
          chmod +x .github/scripts/check_rss.sh
          chmod +x .github/scripts/download_rdf_catalog.sh
          chmod +x .github/scripts/extract_gutenberg_authors.sh
          chmod +x .github/scripts/load_rdf_files.sh
          chmod +x .github/scripts/setup_oxigraph.sh

      - name: Cache Oxigraph DB
        uses: actions/cache@v4
        with:
          path: oxigraph_db
          key: oxigraph-db-manual-v1
          restore-keys: |
            oxigraph-db-

      - name: Check if oxigraph_db exists
        run: ./.github/scripts/check_oxigraph_db.sh

      - name: Check RSS
        if: env.LOAD_MODE == 'partial'
        run: ./.github/scripts/check_rss.sh

      - name: Download RDF catalog
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        run: ./.github/scripts/download_rdf_catalog.sh pg_rdf_files

      - name: Set up Docker
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Run Oxigraph Docker container
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        run: ./.github/scripts/setup_oxigraph.sh

      - name: Load RDF files into DB
        if: env.LOAD_MODE == 'full' || env.LOAD_MODE == 'partial'
        run: |
          ./.github/scripts/load_rdf_files.sh ${{ env.LOAD_MODE }} \
            pg_rdf_files/cache/epub

      - name: Perform SPARQL query to count ebooks
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        run: |
          curl -G --data-urlencode 'query=SELECT (COUNT(*) AS ?total) WHERE {
            GRAPH <http://gutenberg.org/graph/catalog> {
              ?s a <http://www.gutenberg.org/2009/pgterms/ebook>
            } }' \
            http://localhost:7878/query

      - name: Extract authors
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        run: |
          ./.github/scripts/extract_gutenberg_authors.sh

      - name: Cache authors CSV
        if: env.LOAD_MODE != 'none' || github.event.inputs.run_extractions == 'true'
        uses: actions/cache@v4
        with:
          path: gutenberg_authors.csv
          key: gutenberg-authors-manual-v1
          restore-keys: |
            gutenberg-authors-
